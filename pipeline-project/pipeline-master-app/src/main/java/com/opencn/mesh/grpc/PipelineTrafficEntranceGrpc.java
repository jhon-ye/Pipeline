package com.opencn.mesh.grpc;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.protobuf.ByteString;import com.opencn.mesh.common.BizCommonServiceFactory;import com.opencn.mesh.log.PipelineLogger;import com.opencn.mesh.service.BizCommonService;import io.grpc.stub.StreamObserver;import org.lognet.springboot.grpc.GRpcService;import javax.annotation.Resource;@GRpcServicepublic class PipelineTrafficEntranceGrpc extends BizCommonServiceGrpc.BizCommonServiceImplBase {    private static final Gson G = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").setPrettyPrinting().create();    @Resource    private BizCommonServiceFactory commonServiceFactory;    @Override    public void req(PipelineRequest request, StreamObserver<PipelineResponse> responseObserver) {        com.opencn.mesh.model.PipelineRequest pipelineRequest = com.opencn.mesh.model.PipelineRequest.builder()                .build();        try {            BizCommonService proxy = commonServiceFactory.getProxy(request.getBizIdentify());            com.opencn.mesh.model.PipelineResponse response = proxy.invoke(pipelineRequest);            PipelineLogger.debug("[pipeline] req success with bizIdentify:{} bizKey:{}",                    pipelineRequest.getBizIdentify(), pipelineRequest.getBizKey(), pipelineRequest.getBizData());            PipelineResponse reply = PipelineResponse.newBuilder()                    .setError(response.getError())                    .setSuccess(response.isSuccess())                    .setData(ByteString.copyFromUtf8(G.toJson(response.getData())))                    .build();            responseObserver.onNext(reply);            responseObserver.onCompleted();        } catch (Exception e) {            PipelineLogger.error("[pipeline] req error with bizIdentify:{} bizKey:{} cause {}",                    pipelineRequest.getBizIdentify(), pipelineRequest.getBizKey(), e.getMessage());        }        super.req(request, responseObserver);    }}