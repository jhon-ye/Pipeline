package com.opencn.mesh.endpoint;import com.opencn.mesh.common.BizCommonServiceFactory;import com.opencn.mesh.log.PipelineLogger;import com.opencn.mesh.model.PipelineRequest;import com.opencn.mesh.model.PipelineResponse;import com.opencn.mesh.service.BizCommonService;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;@RestController("/")public class TrafficEndPoint {   @Resource   private BizCommonServiceFactory commonServiceFactory;    @PostMapping("/request")    @ResponseBody    public PipelineResponse req(@RequestBody PipelineRequest pipelineRequest) {        try {            BizCommonService proxy = commonServiceFactory.getProxy(pipelineRequest.getBizIdentify());            PipelineResponse response = proxy.invoke(pipelineRequest);            PipelineLogger.debug("[pipeline] req success with bizIdentify:{} bizKey:{}",                    pipelineRequest.getBizIdentify(), pipelineRequest.getBizKey(), pipelineRequest.getBizData());            return response;        } catch (Exception e) {            PipelineLogger.error("[pipeline] req error with bizIdentify:{} bizKey:{} cause {}",                    pipelineRequest.getBizIdentify(), pipelineRequest.getBizKey(), e.getMessage());            return PipelineResponse.builder().success(false).data("server error").build();        }    }    @PostMapping("/callback/{bizIdentify}/{bizKey}")    @ResponseBody    public PipelineResponse callback(@PathVariable String bizIdentify, @PathVariable String bizKey, @RequestBody Object request) {        try {            BizCommonService proxy = commonServiceFactory.getProxy(bizIdentify);            PipelineResponse response = proxy.callback(bizKey, request);            PipelineLogger.info("[pipeline] callback success with bizIdentify:{} bizKey:{}",                    bizIdentify, bizKey, request);            return response;        } catch (Exception e) {            PipelineLogger.error("[pipeline] callback error with bizIdentify:{} bizKey:{} cause {}",                    bizIdentify, bizKey, e.getMessage());            return PipelineResponse.builder().success(false).data("server error").build();        }    }}