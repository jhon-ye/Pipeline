package com.opencn.mesh;import com.alipay.sofa.ark.api.ArkClient;import com.alipay.sofa.ark.common.util.FileUtils;import com.ctrip.framework.apollo.core.ConfigConsts;import com.ctrip.framework.apollo.enums.PropertyChangeType;import com.ctrip.framework.apollo.model.ConfigChange;import com.ctrip.framework.apollo.model.ConfigChangeEvent;import com.ctrip.framework.apollo.spring.annotation.ApolloConfigChangeListener;import com.opencn.mesh.log.PipelineLogger;import com.opencn.mesh.util.AddressUtils;import org.springframework.boot.CommandLineRunner;import org.springframework.core.Ordered;import org.springframework.stereotype.Component;import javax.annotation.Resource;import java.io.File;import java.net.Inet4Address;import java.net.URL;import java.util.List;import java.util.Map;import java.util.Optional;@Componentpublic class ScheduleConfigListener implements CommandLineRunner, Ordered {        @Resource    private PipelineApolloConfig pipelineApolloConfig;    @ApolloConfigChangeListener(            value = {ConfigConsts.NAMESPACE_APPLICATION, "application"},            interestedKeyPrefixes = {"pipeline.schedule.config.instances."})    public void onChange(ConfigChangeEvent changeEvent) {        for(String key: changeEvent.changedKeys()) {            ConfigChange change = changeEvent.getChange(key);            if (key.equals(PipelineApolloConfig.CONFIG_META_PLUGINS) && PropertyChangeType.MODIFIED                    .equals(change.getChangeType())) {                String oldValue = change.getOldValue();                String newValue = change.getNewValue();            }        }    }    @Override    public void run(String... args) throws Exception {        Optional<Inet4Address> localIp4Address = AddressUtils.getLocalIp4Address();        if (localIp4Address.isPresent()) {            String instanceName = localIp4Address.get().getHostAddress().replace(".", "-");            Map<String, PipelineApolloConfig.InstanceConfig> instances = pipelineApolloConfig.getInstances();            instances.forEach((name, instance) -> {                if (name.equals(instanceName)) {                    List<PipelineApolloConfig.PluginConfig> plugins = instance.getPlugins();                    plugins.forEach(pluginConfig -> {                        PipelineLogger.debug("[ScheduleConfig] load plugin {} in instance {}", pluginConfig.getName()+":"+pluginConfig.getVersion(), instanceName);                        try {                            URL url = new URL(pluginConfig.getRepo());                            File bizFile = ArkClient.createBizSaveFile(pluginConfig.getName(), pluginConfig.getVersion());                            FileUtils.copyInputStreamToFile(url.openStream(), bizFile);                            ArkClient.installBiz(bizFile);                        } catch (Throwable e) {                            PipelineLogger.error("[pipeline] start plugin  {} failed cause {}",                                    pluginConfig.getName()+ ":" + pluginConfig.getName(), e.getMessage());                        }                    });                }            });        }    }    @Override    public int getOrder() {        return Integer.MIN_VALUE + 1;    }}