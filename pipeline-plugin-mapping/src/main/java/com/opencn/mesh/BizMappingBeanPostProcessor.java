package com.opencn.mesh;import com.alipay.sofa.ark.common.util.BizIdentityUtils;import com.alipay.sofa.rpc.boot.runtime.param.BoltBindingParam;import com.alipay.sofa.runtime.api.annotation.SofaClientFactory;import com.alipay.sofa.runtime.api.aware.ClientFactoryAware;import com.alipay.sofa.runtime.api.client.ClientFactory;import com.alipay.sofa.runtime.api.client.ServiceClient;import com.alipay.sofa.runtime.api.client.param.BindingParam;import com.alipay.sofa.runtime.api.client.param.ServiceParam;import com.opencn.mesh.exception.PipelineException;import com.opencn.mesh.service.BizCommonService;import org.springframework.beans.BeansException;import org.springframework.beans.factory.DisposableBean;import org.springframework.beans.factory.annotation.Value;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.core.annotation.AnnotationUtils;import org.springframework.util.ObjectUtils;import org.springframework.util.ReflectionUtils;import org.springframework.util.StringUtils;import javax.annotation.Resource;import java.util.ArrayList;import java.util.List;public class BizMappingBeanPostProcessor implements BeanPostProcessor, ApplicationContextAware, DisposableBean, ClientFactoryAware {    private ClientFactory clientFactory;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {        return bean;    }    @Value("${pipeline.biz-name}")    private String bizName;    @Value("${pipeline.biz-version}")    private String bizVersion;    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {        BizService bizService = AnnotationUtils.findAnnotation(bean.getClass(), BizService.class);        if (!ObjectUtils.isEmpty(bizService)) {            if(!StringUtils.hasText(bizName) || !StringUtils.hasText(bizVersion)) {                throw new PipelineException("biz name and biz version must config");            }            String  bizIdentify = BizIdentityUtils.generateBizIdentity(bizName, bizVersion);            BizMappingRegister.routerRegistry(clientFactory, bizIdentify);            ReflectionUtils.doWithMethods(bean.getClass(), (method) -> {                BizMapping annotation = AnnotationUtils.findAnnotation(method, BizMapping.class);                if (!ObjectUtils.isEmpty(annotation)) {                    String bizKey = annotation.bizKey();                    if (!StringUtils.hasText(bizKey)) {                        throw  new PipelineException("biz key can not be null");                    }                    BizMappingRegister.registry(bizIdentify, bizKey, bean, method);                }            });        }        return bean;    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        BizMappingRegister.applicationContext = applicationContext;    }    @Override    public void destroy() {        BizMappingRegister.destroy();    }    @Override    public void setClientFactory(ClientFactory clientFactory) {        this.clientFactory = clientFactory;    }}