package com.opencn.mesh;import com.alipay.sofa.ark.api.ArkClient;import com.opencn.mesh.exception.PipelineException;import org.springframework.context.ApplicationContext;import org.springframework.util.ObjectUtils;import org.springframework.util.ReflectionUtils;import java.lang.reflect.Method;import java.util.concurrent.ConcurrentMap;public class BizMappingRegister {    private static ConcurrentMap<String, Method> bizMappings;    private static ConcurrentMap<String, Object> bizService;    private final static ConcurrentMap<String, ConcurrentMap<String, Object>> CM2 =  ArkClient.getBizManagerService().getBizService();    private final static ConcurrentMap<String, ConcurrentMap<String, Method>> MM2 =  ArkClient.getBizManagerService().getBizMappings();    public static ApplicationContext applicationContext;    public static void registry(String bizIdentify, String bizKey, Object targetBean, Method method) {        if (CM2.containsKey(bizIdentify)) {            bizService = CM2.get(bizIdentify);            CM2.get(bizIdentify).putIfAbsent(bizKey, targetBean);        }        if (MM2.containsKey(bizIdentify)) {            bizMappings = MM2.get(bizIdentify);            MM2.get(bizIdentify).putIfAbsent(bizKey, method);        }        //CM.put(bizKey, targetBean);        //MM.put(bizKey, method);    }    public static Object execute(String bizKey, Object... args) {        Method method = bizMappings.get(bizKey);        Object targetBean = bizService.get(bizKey);        if (ObjectUtils.isEmpty(method) || ObjectUtils.isEmpty(targetBean)) {            throw new PipelineException("can not find biz method or biz service with biz key, check service is added annotation named BizService or BizMapping");        }        return ReflectionUtils.invokeMethod(method, targetBean, args);    }    public static void destroy() {        //CM.clear();        //MM.clear();    }}