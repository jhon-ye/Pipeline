package com.opencn.mesh;import com.alipay.sofa.ark.api.ArkClient;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.opencn.mesh.exception.PipelineException;import com.opencn.mesh.model.PipelineResponse;import org.springframework.beans.BeanUtils;import org.springframework.context.ApplicationContext;import org.springframework.util.ObjectUtils;import org.springframework.util.ReflectionUtils;import java.lang.reflect.Method;import java.lang.reflect.Parameter;import java.util.Map;import java.util.concurrent.ConcurrentMap;public class BizMappingRegister {    private static ConcurrentMap<String, Method> bizMappings;    private static ConcurrentMap<String, Object> bizService;    private final static ConcurrentMap<String, ConcurrentMap<String, Object>> CM2 =  ArkClient.getBizManagerService().getBizService();    private final static ConcurrentMap<String, ConcurrentMap<String, Method>> MM2 =  ArkClient.getBizManagerService().getBizMappings();    private static final Gson G = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create();    public static ApplicationContext applicationContext;    public static void registry(String bizIdentify, String bizKey, Object targetBean, Method method) {        if (CM2.containsKey(bizIdentify)) {            bizService = CM2.get(bizIdentify);            Object old = CM2.get(bizIdentify).putIfAbsent(bizKey, targetBean);            if (!ObjectUtils.isEmpty(old)) {                throw new PipelineException("not unique bizKey within biz named " + bizIdentify);            }        }        if (MM2.containsKey(bizIdentify)) {            bizMappings = MM2.get(bizIdentify);            MM2.get(bizIdentify).putIfAbsent(bizKey, method);        }        //CM.put(bizKey, targetBean);        //MM.put(bizKey, method);    }    public static PipelineResponse execute(String bizKey, Object... args) {        Method method = bizMappings.get(bizKey);        Object targetBean = bizService.get(bizKey);        if (ObjectUtils.isEmpty(method) || ObjectUtils.isEmpty(targetBean)) {            throw new PipelineException("can not find biz method or biz service with biz key, check service is added annotation named BizService or BizMapping");        }        Class<?>[] parameterTypes = method.getParameterTypes();        Parameter[] parameters = method.getParameters();        int length = parameterTypes.length;        try {            Map bizMap = G.fromJson(G.toJson(args[0]), Map.class);            Object data;            if (length == 0) {                data = ReflectionUtils.invokeMethod(method, targetBean);            } else {                Object[] bizArgs = new Object[length];                for (int i = 0; i < length; i++) {                    Object bizObj = bizMap.get(parameters[i].getName());                    if(ObjectUtils.isEmpty(bizObj)) {                        throw new PipelineException("can not find biz method param named " + parameters[i].getName() + ", check param");                    }                    bizArgs[i] = G.fromJson(G.toJson(bizObj), parameterTypes[i]);                }                data = ReflectionUtils.invokeMethod(method, targetBean, bizArgs);            }            return PipelineResponse.builder().data(data).success(true).build();        } catch (Exception e) {            return PipelineResponse.builder().error(e.getMessage()).success(false).build();        }    }    public static void destroy() {        //CM.clear();        //MM.clear();    }}