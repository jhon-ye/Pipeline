package com.opencn.mesh.util;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;/** *  a = 1,3,5,7 *  b = 1,4,5,8 * * */public class ListUtils {    /**     * subtraction     * @param a     * @param b     * @return list     */    public static List<String> subList(List<String> a, List<String> b) {        Map<String, String> tempMap = b.parallelStream().collect(Collectors.toMap(Function.identity(), Function.identity(), (oldData, newData) -> newData));        return a.parallelStream().filter(str-> !tempMap.containsKey(str)).collect(Collectors.toList());    }    /**     * intersection     * @param a     * @param b     * @return     */    public static List<String> intersectList(List<String> a, List<String> b){        Map<String, String> tempMap = b.parallelStream().collect(Collectors.toMap(Function.identity(), Function.identity(), (oldData, newData) -> newData));        return a.parallelStream().filter(tempMap::containsKey).collect(Collectors.toList());    }    public static List<String> distinctMergeList1(List<String> list1, List<String> list2){        list1 = subList(list1,list2);        list1.addAll(list2);        return list1;    }}